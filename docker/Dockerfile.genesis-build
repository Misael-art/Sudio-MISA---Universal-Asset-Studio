# Dockerfile para Build do Genesis Plus GX Core
# Universal Asset Studio - Ambiente de Build Controlado
#
# NOTA: O método recomendado é usar scripts/build-genesis-universal.ps1
# Este Dockerfile é mantido para casos específicos onde build em container é necessário

FROM emscripten/emsdk:3.1.45

# Metadados
LABEL maintainer="Universal Asset Studio"
LABEL description="Ambiente para recompilação do Genesis Plus GX com exports customizados"
LABEL description.recommended="Use scripts/build-genesis-universal.ps1 para build nativo"
LABEL version="1.0"

# Instalar dependências adicionais
RUN apt-get update && apt-get install -y \
    git \
    make \
    cmake \
    build-essential \
    pkg-config \
    wget \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Criar diretório de trabalho
WORKDIR /build

# Script de build integrado
COPY <<EOF /build/build-genesis-core.sh
#!/bin/bash
set -e
set -x

echo "=== Universal Asset Studio - Genesis Plus GX Build ==="
echo "Emscripten Version: $(emcc --version | head -1)"
echo "Working Directory: $(pwd)"
echo ""

# Clonar Genesis Plus GX (shallow clone para velocidade)
echo "Clonando Genesis Plus GX..."
git clone --depth=1 https://github.com/ekeeke/Genesis-Plus-GX.git genesis-plus-gx
echo "Repositório clonado com sucesso:"
ls -la genesis-plus-gx/

cd genesis-plus-gx

# Copiar arquivo de exportações
echo "Copiando arquivo de exportações..."
cp /build/emscripten_exports.c .
echo "Arquivo emscripten_exports.c copiado com sucesso!"

# Compilar usando Makefile.libretro (método principal)
echo "Compilando Genesis Plus GX com Makefile.libretro..."
if [ -f "Makefile.libretro" ]; then
    echo "Makefile.libretro encontrado, iniciando compilação para bytecode"
    # Adicionar arquivo de exportações aos sources
    echo "Adicionando emscripten_exports.c aos sources..."
    # Verificar conteúdo original do Makefile
     echo "Verificando Makefile.libretro original..."
     grep -n "SOURCES_C" Makefile.libretro | head -5
     # Adicionar o arquivo de exportações de forma mais robusta
     echo "emscripten_exports.c \" >> Makefile.libretro
     echo "Arquivo adicionado ao final do Makefile"
     # Verificar se foi adicionado
     tail -5 Makefile.libretro
    # Executar compilação
    emmake make -f Makefile.libretro platform=emscripten TARGET_NAME=genesis_plus_gx_universal HAVE_CHD=0 HAVE_CDROM=0 DEBUG=0 || true
    
    # Verificar se a compilação foi bem-sucedida através da existência do arquivo bytecode
    echo "Verificando arquivos gerados..."
    ls -la *.bc *.so 2>/dev/null || echo "Nenhum arquivo .bc ou .so encontrado"
    
    # Verificar se algum arquivo bytecode foi gerado
    if [ -f "genesis_plus_gx_universal_libretro_emscripten.bc" ] || [ -f "genesis_plus_gx_libretro_emscripten.bc" ] || ls *.bc >/dev/null 2>&1; then
        echo "Compilação para bytecode bem-sucedida! Arquivos encontrados:"
         ls -la *.bc 2>/dev/null || echo "Verificando outros formatos..."
        
        # Encontrar o arquivo bytecode gerado
        if [ -f "genesis_plus_gx_universal_libretro_emscripten.bc" ]; then
            BYTECODE_FILE="genesis_plus_gx_universal_libretro_emscripten.bc"
        elif [ -f "genesis_plus_gx_libretro_emscripten.bc" ]; then
            BYTECODE_FILE="genesis_plus_gx_libretro_emscripten.bc"
        else
            echo "ERRO: Arquivo bytecode não encontrado!"
            ls -la *.bc *.so 2>/dev/null || echo "Nenhum arquivo de saída encontrado"
            exit 1
        fi
        
        echo "Convertendo bytecode para JavaScript e WASM..."
        echo "Arquivo bytecode: $BYTECODE_FILE"
        
        # Converter bytecode para JS e WASM com exportações obrigatórias
        set +e
        emcc \$BYTECODE_FILE -o genesis_plus_gx.js -s WASM=1 -s EXPORTED_RUNTIME_METHODS='["ccall", "cwrap", "getValue", "setValue"]' -s EXPORTED_FUNCTIONS='["_malloc", "_free", "_get_frame_buffer_ref", "_get_frame_buffer_width", "_get_frame_buffer_height", "_get_frame_buffer_pitch", "_get_work_ram_ptr", "_get_work_ram_size", "_get_zram_ptr", "_get_zram_size", "_get_vram_ptr", "_get_vram_size", "_get_cram_ptr", "_get_cram_size", "_get_vsram_ptr", "_get_vsram_size", "_get_vdp_regs_ptr", "_get_vdp_regs_size", "_get_sat_ptr", "_get_sat_size", "_is_core_initialized", "_get_total_memory_size"]' -s ALLOW_MEMORY_GROWTH=1 -s MODULARIZE=1 -s EXPORT_NAME='"genesis_plus_gx"' -O2
        CONVERT_EXIT_CODE=\$?
        set -e
        
        # Verificar resultado da conversão
        if [ -f "genesis_plus_gx.js" ] && [ -f "genesis_plus_gx.wasm" ]; then
            echo ""
            echo "=== BUILD CONCLUÍDO COM SUCESSO ==="
            echo "Arquivos gerados:"
            ls -la genesis_plus_gx.*
            
            # Verificar tamanhos
            if [ -f "genesis_plus_gx.js" ]; then
                JS_SIZE=$(stat -c%s "genesis_plus_gx.js")
                echo "  genesis_plus_gx.js: $((JS_SIZE / 1024)) KB"
            fi
            
            if [ -f "genesis_plus_gx.wasm" ]; then
                WASM_SIZE=$(stat -c%s "genesis_plus_gx.wasm")
                echo "  genesis_plus_gx.wasm: $((WASM_SIZE / 1024)) KB"
            fi
            
            # Verificar exports no arquivo JS
            echo ""
            echo "Verificando exports no arquivo gerado..."
            if grep -q "_get_vram_ptr" genesis_plus_gx.js; then
                echo "  ✓ Exports encontrados no arquivo JS"
            else
                echo "  ⚠ Exports não encontrados - verifique se as funções foram incluídas"
            fi
            
            # Copiar para output se disponível
            if [ -d "/output" ]; then
                echo "Copiando resultados para /output..."
                cp genesis_plus_gx.* /output/
                echo "Arquivos copiados com sucesso!"
            fi
            
            echo "Build do Genesis Plus GX concluído com sucesso!"
            exit 0
        else
            echo "ERRO: Falha na conversão do bytecode para JS/WASM"
            exit 1
        fi
    else
        echo "ERRO: Falha na compilação com Makefile.libretro - nenhum arquivo bytecode gerado"
        echo "Verifique os logs acima para detalhes do erro"
        echo "Conteúdo do diretório atual:"
        ls -la
        exit 1
    fi
else
    echo "ERRO: Makefile.libretro não encontrado!"
    echo "Conteúdo do diretório:"
    ls -la
    exit 1
fi
EOF

# Scripts are now handled by compile-genesis.sh

# Copy build script and corrected exports file
COPY docker/compile-genesis.sh /build/
COPY docker/emscripten_exports_corrected.c /build/

# Script de entrada
COPY <<EOF /build/entrypoint.sh
#!/bin/bash
set -e

echo "=== Universal Asset Studio - Genesis Plus GX Build Container ==="
echo "Uso:"
echo "  docker run --rm -v \$(pwd):/output genesis-build"
echo "  docker run --rm -v \$(pwd):/output -v /path/to/source:/build/genesis-plus-gx genesis-build"
echo ""

# Executar build
/build/build-genesis-core.sh

# Copiar resultados para output se montado
if [ -d "/output" ] && [ -f "genesis-plus-gx/genesis_plus_gx.js" ]; then
    echo "Copiando resultados para /output..."
    cp genesis-plus-gx/genesis_plus_gx.* /output/
    echo "Arquivos copiados com sucesso!"
else
    echo "Diretório /output não montado ou build falhou"
    echo "Para copiar os arquivos, monte um volume: -v \$(pwd):/output"
fi

echo ""
echo "Build container finalizado!"
EOF

RUN chmod +x /build/entrypoint.sh

# Make script executable and set as entry point
RUN chmod +x /build/compile-genesis.sh
CMD ["/build/compile-genesis.sh"]

# Documentação
LABEL usage="docker run --rm -v \$(pwd):/output genesis-build"
LABEL description.build="Compila Genesis Plus GX com exports customizados para Universal Asset Studio"
LABEL description.output="Gera genesis_plus_gx.js e genesis_plus_gx.wasm com ponteiros de memória expostos"
LABEL description.exports="_get_frame_buffer_ref, _get_vram_ptr, _get_cram_ptr, _get_vsram_ptr, _get_vdp_regs_ptr, _get_sat_ptr"